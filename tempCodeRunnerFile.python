from collections import defaultdict

with open("./xyz.txt", "r") as f:
    input_lines = [line.strip() for line in f.readlines()]

split_index = input_lines.index("")
rules = [list(map(int, line.split('|'))) for line in input_lines[:split_index]]
pages = [list(map(int, line.split(','))) for line in input_lines[split_index + 1:]]


rules_ = defaultdict(list)
for start, end in rules:
    rules_[start].append(end)
print (rules_)
def is_valid(line):
    line_set = set(line)
    positions = {value: idx for idx, value in enumerate(line)}
    for start, dependencies in rules_.items():
        if start in line_set:
            for end in dependencies:
                if end in line_set and positions[start] > positions[end]:
                    return False
    return True


middles = [line[len(line) // 2] for line in pages if is_valid(line)]

result_valid = sum(middles)

print("Sum", result_valid)